<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.his.dao.baseinfo.SickBedDao">
	<resultMap id="BaseResultMap" type="com.his.entity.baseinfo.SickBed">
		<id column="BedID" property="bedid" jdbcType="VARCHAR" />
		<result column="BedName" property="bedname" jdbcType="NVARCHAR" />
		<result column="BedPrice" property="bedprice" jdbcType="INTEGER" />
		<result column="IsActive" property="isactive" jdbcType="BIT" />
		<result column="UnUsed1" property="unused1" jdbcType="NVARCHAR" />
		<result column="UnUsed2" property="unused2" jdbcType="NVARCHAR" />
		<association property="sickroom" column="RoomID"
			select="com.his.dao.baseinfo.SickRoomDao.selectByPrimaryKey"></association>
	</resultMap>

	<sql id="Base_Column_List">
		BedID, BedName, RoomID, BedPrice, IsActive, UnUsed1,
		UnUsed2
	</sql>

	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from SickBed
		where BedID = #{bedid,jdbcType=VARCHAR}
	</select>

	<delete id="deleteByPrimaryKey" parameterType="java.lang.String">
		delete from
		SickBed
		where BedID = #{bedid,jdbcType=VARCHAR}
	</delete>

	<insert id="insert" parameterType="com.his.entity.baseinfo.SickBed">
		insert into SickBed (BedID,
		BedName, RoomID, BedPrice,
		IsActive, UnUsed1, UnUsed2
		)
		values
		(#{bedid,jdbcType=VARCHAR}, #{bedname,jdbcType=NVARCHAR},
		#{sickroom.roomid,jdbcType=VARCHAR}, #{bedprice,jdbcType=INTEGER},
		#{isactive,jdbcType=BIT}, #{unused1,jdbcType=NVARCHAR},
		#{unused2,jdbcType=NVARCHAR}
		)
	</insert>

	<insert id="insertSelective" parameterType="com.his.entity.baseinfo.SickBed">
		insert into SickBed
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="bedid != null">
				BedID,
			</if>
			<if test="bedname != null">
				BedName,
			</if>
			<if test="sickroom != null">
				RoomID,
			</if>
			<if test="bedprice != null">
				BedPrice,
			</if>
			<if test="isactive != null">
				IsActive,
			</if>
			<if test="unused1 != null">
				UnUsed1,
			</if>
			<if test="unused2 != null">
				UnUsed2,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="bedid != null">
				#{bedid,jdbcType=VARCHAR},
			</if>
			<if test="bedname != null">
				#{bedname,jdbcType=NVARCHAR},
			</if>
			<if test="sickroom != null">
				#{sickroom.roomid,jdbcType=VARCHAR},
			</if>
			<if test="bedprice != null">
				#{bedprice,jdbcType=INTEGER},
			</if>
			<if test="isactive != null">
				#{isactive,jdbcType=BIT},
			</if>
			<if test="unused1 != null">
				#{unused1,jdbcType=NVARCHAR},
			</if>
			<if test="unused2 != null">
				#{unused2,jdbcType=NVARCHAR},
			</if>
		</trim>
	</insert>

	<update id="updateByPrimaryKeySelective" parameterType="com.his.entity.baseinfo.SickBed">
		update SickBed
		<set>
			<if test="bedname != null">
				BedName = #{bedname,jdbcType=NVARCHAR},
			</if>
			<if test="sickroom != null">
				RoomID = #{sickroom.roomid,jdbcType=VARCHAR},
			</if>
			<if test="bedprice != null">
				BedPrice = #{bedprice,jdbcType=INTEGER},
			</if>
			<if test="isactive != null">
				IsActive = #{isactive,jdbcType=BIT},
			</if>
			<if test="unused1 != null">
				UnUsed1 = #{unused1,jdbcType=NVARCHAR},
			</if>
			<if test="unused2 != null">
				UnUsed2 = #{unused2,jdbcType=NVARCHAR},
			</if>
		</set>
		where BedID = #{bedid,jdbcType=VARCHAR}
	</update>

	<update id="updateByPrimaryKey" parameterType="com.his.entity.baseinfo.SickBed">
		update SickBed
		set
		BedName = #{bedname,jdbcType=NVARCHAR},
		RoomID =
		#{sickroom.roomid,jdbcType=VARCHAR},
		BedPrice =
		#{bedprice,jdbcType=INTEGER},
		IsActive = #{isactive,jdbcType=BIT},
		UnUsed1 = #{unused1,jdbcType=NVARCHAR},
		UnUsed2 =
		#{unused2,jdbcType=NVARCHAR}
		where BedID = #{bedid,jdbcType=VARCHAR}
	</update>

	<select id="findSickBed" parameterType="Map" resultMap="BaseResultMap">
		select * from SickBed
		<where>
			<!-- 按床铺id搜索 -->
			<if test="bedname !=null and bedname !='' ">
				and BedName like #{bedname}
			</if>
			<if test="roomid !=null and roomid !='' ">
				and RoomID = #{roomid}
			</if>
		</where>
		<if test="start!=null and size!=null">
			order by BedID offset ${start} rows fetch next ${size}
			rows only
		</if>
	</select>

	<select id="getTotalSickBed" parameterType="Map" resultType="Long">
		select count(*) from SickBed
		<where>
			<!-- 按床铺id搜索 -->
			<if test="bedname !=null and bedname !='' ">
				and BedName like #{bedname}
			</if>
			<if test="roomid !=null and roomid !='' ">
				and RoomID = #{roomid}
			</if>
		</where>
	</select>
	
	<select id="getMaxSickBedID" parameterType="Map"
		resultType="String">
		select MAX(BedID) from SickBed
			<where>
			<!-- 依照前缀搜索 -->
			<if test="roomid!=null and roomid!=''">
				and BedID like #{roomid}
			</if>
		</where>
	</select>
</mapper>