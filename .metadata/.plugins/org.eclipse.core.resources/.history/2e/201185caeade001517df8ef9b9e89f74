<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.his.dao.baseinfo.AccountClassDao" >
  <resultMap id="BaseResultMap" type="com.his.entity.baseinfo.AccountClass" >
    <id column="AccountID" property="accountid" jdbcType="VARCHAR" />
    <result column="AccountName" property="accountname" jdbcType="NVARCHAR" />
    <result column="PyCode" property="pycode" jdbcType="NVARCHAR" />
    <result column="WbCode" property="wbcode" jdbcType="NVARCHAR" />
    <result column="SelfDefCode" property="selfdefcode" jdbcType="NVARCHAR" />
    <result column="IsActive" property="isactive" jdbcType="BIT" />
    <result column="Descripting" property="descripting" jdbcType="NVARCHAR" />
    <result column="UnUsed1" property="unused1" jdbcType="NVARCHAR" />
    <result column="UnUsed2" property="unused2" jdbcType="NVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    AccountID, AccountName, PyCode, WbCode, SelfDefCode, IsActive, Descripting, 
    UnUsed1, UnUsed2
  </sql>
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from AccountClass
    where AccountID = #{accountid,jdbcType=VARCHAR}
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from AccountClass
    where AccountID = #{accountid,jdbcType=VARCHAR}
  </delete>
  
  <insert id="insert" parameterType="com.his.entity.baseinfo.AccountClass" >
    insert into AccountClass (AccountID, AccountName, PyCode, WbCode, SelfDefCode, IsActive, Descripting, 
    UnUsed1, UnUsed2
      )
    values (#{accountid,jdbcType=VARCHAR}, #{accountname,jdbcType=NVARCHAR}, #{pycode,jdbcType=NVARCHAR}, 
      #{wbcode,jdbcType=NVARCHAR}, #{selfdefcode,jdbcType=NVARCHAR}, 
      #{isactive,jdbcType=BIT}, #{descripting,jdbcType=NVARCHAR},
      #{unused1,jdbcType=NVARCHAR}, #{unused2,jdbcType=NVARCHAR}
      )
  </insert>
  
  <insert id="insertSelective" parameterType="com.his.entity.baseinfo.AccountClass" >
    insert into AccountClass
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="accountid != null" >
        AccountID,
      </if>
      <if test="accountname != null" >
        AccountName,
      </if>
      <if test="pycode != null" >
        PyCode,
      </if>
      <if test="wbcode != null" >
        WbCode,
      </if>
      <if test="selfdefcode != null" >
        SelfDefCode,
      </if>
      <if test="isactive != null" >
        IsActive,
      </if>
      <if test="descripting != null" >
        Descripting,
      </if>
      <if test="unused1 != null" >
        UnUsed1,
      </if>
      <if test="unused2 != null" >
        UnUsed2,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="accountid != null" >
        #{accountid,jdbcType=VARCHAR},
      </if>
      <if test="accountname != null" >
        #{accountname,jdbcType=NVARCHAR},
      </if>
      <if test="pycode != null" >
        #{pycode,jdbcType=NVARCHAR},
      </if>
      <if test="wbcode != null" >
        #{wbcode,jdbcType=NVARCHAR},
      </if>
      <if test="selfdefcode != null" >
        #{selfdefcode,jdbcType=NVARCHAR},
      </if>
      <if test="isactive != null" >
        #{isactive,jdbcType=BIT},
      </if>
      <if test="descripting != null" >
        #{descripting,jdbcType=NVARCHAR},
      </if>
      <if test="unused1 != null" >
        #{unused1,jdbcType=NVARCHAR},
      </if>
      <if test="unused2 != null" >
        #{unused2,jdbcType=NVARCHAR},
      </if>
    </trim>
  </insert>
  
  <update id="updateByPrimaryKeySelective" parameterType="com.his.entity.baseinfo.AccountClass" >
    update AccountClass
    <set >
      <if test="accountname != null" >
        AccountName = #{accountname,jdbcType=NVARCHAR},
      </if>
      <if test="pycode != null" >
        PyCode = #{pycode,jdbcType=NVARCHAR},
      </if>
      <if test="wbcode != null" >
        WbCode = #{wbcode,jdbcType=NVARCHAR},
      </if>
      <if test="selfdefcode != null" >
        SelfDefCode = #{selfdefcode,jdbcType=NVARCHAR},
      </if>
      <if test="isactive != null" >
        IsActive = #{isactive,jdbcType=BIT},
      </if>
      <if test="descripting != null" >
        Descripting = #{descripting,jdbcType=NVARCHAR},
      </if>
      <if test="unused1 != null" >
        UnUsed1 = #{unused1,jdbcType=NVARCHAR},
      </if>
      <if test="unused2 != null" >
        UnUsed2 = #{unused2,jdbcType=NVARCHAR},
      </if>
    </set>
    where AccountID = #{accountid,jdbcType=VARCHAR}
  </update>
  
  <update id="updateByPrimaryKey" parameterType="com.his.entity.baseinfo.AccountClass" >
    update AccountClass
    set AccountName = #{accountname,jdbcType=NVARCHAR},
      PyCode = #{pycode,jdbcType=NVARCHAR},
      WbCode = #{wbcode,jdbcType=NVARCHAR},
      SelfDefCode = #{selfdefcode,jdbcType=NVARCHAR},
      IsActive = #{isactive,jdbcType=BIT},
      Descripting = #{descripting,jdbcType=NVARCHAR},
      UnUsed1 = #{unused1,jdbcType=NVARCHAR},
      UnUsed2 = #{unused2,jdbcType=NVARCHAR}
    where AccountID = #{accountid,jdbcType=VARCHAR}
  </update>
  
	<select id="findAccountClass" parameterType="Map" resultMap="BaseResultMap">
		select * from AccountClass
		<where>
			<!-- 按会计分类名称查询 -->
			<if test="accountname!=null and accountname!=''">
				and AccountName like #{accountname}
			</if>
		</where>
		<if test="start!=null and size!=null">
			order by AccountID offset ${start} rows fetch next ${size} rows only
		</if>
	</select>
	
	<select id="getTotalAccountClass" parameterType="Map" resultType="Long">
		select count(*) from AccountClass
		<where>
			<!-- 按会计分类名称查询 -->
			<if test="accountname!=null and accountname!=''">
				and AccountName like #{accountname}
			</if>
		</where>
	</select>
	
	<select id="selectMaxaccountid" resultType="String">
		select MAX(AccountID)
		from AccountClass
	</select>
</mapper>